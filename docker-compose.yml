version: '3'

services:

  broker-service:
    build:
      context: ./broker-service
      dockerfile: ./Dockerfile
    restart: always
    ports:
      - "8080:80"
    deploy:
      mode: replicated
      replicas: 1
    volumes:
      - ~/.ssh:/root/.ssh


  logger-service:
    build:
      context: ./logger-service
      dockerfile: ./Dockerfile
    restart: always
    ports:
      - "8082:80"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      MONGO_USERNAME: admin
      MONGO_PASSWORD: password

  queue-listener:
    build:
      context: ./queue-listener
      dockerfile: ./Dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DSN: "host=postgres port=5432 user=postgres password=password dbname=jobs sslmode=disable timezone=Europe/Amsterdam connect_timeout=5"

  queue-worker:
    build:
      context: ./queue-worker
      dockerfile: ./Dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1

  project-service:
    build:
      context: ./project-service
      dockerfile: ./Dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      - PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser
    volumes:
      - /var/www/:/var/www
      - /etc/nginx/sites-available:/etc/nginx/sites-available
      - /etc/nginx/sites-enabled:/etc/nginx/sites-enabled
      - ~/.ssh:/root/.ssh

  chrome-headless-shell:
    container_name: headless-shell
    image: 'google/chrome:latest'
    ports:
      - "9222:9222"
    command: [ "--headless", "--disable-gpu", "--remote-debugging-address=0.0.0.0", "--remote-debugging-port=9222", "http://localhost" ]

  postgres:
    image: 'postgres:latest'
    restart: always
    ports:
      - "5432:5432"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: jobs
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

#  mail-service:
#    build:
#      context: ./mail-service
#      dockerfile: ./Dockerfile
#    restart: always
#    ports:
#      - "8083:80"
#    deploy:
#      mode: replicated
#      replicas: 1
#    environment:
#      MAIL_DOMAIN: localhost
#      MAIL_HOST: mailhog
#      MAIL_PORT: 1025
#      MAIL_ENCRYPTION: none
#      MAIL_USERNAME: ""
#      MAIL_PASSWORD: ""
#      MAIL_FROM_NAME: "John Doe"
#      MAIL_FROM_ADDRESS: "john.doe@example.com"

#  mailhog:
#    image: 'mailhog/mailhog:latest'
#    ports:
#      - "1025:1025"
#      - "8025:8025"
#
  mongo:
    image: 'mongo:4.2.16-bionic'
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./db-data/mongo/:/data/db

